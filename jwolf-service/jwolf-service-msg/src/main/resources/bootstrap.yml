spring:
  application:
    name: msg
  profiles:
    active: test
  cloud:
    nacos:
      config:
        file-extension: yml
        server-addr: @package.host@:8848
        shared-configs:
          - data-id: common.yml                #配置所有工程共享的配置，注意里面的配置默认不能动态刷新，需要时可配置自动刷新
            refresh: true
        namespace: test
        username: nacos
        password: nacos
      discovery:
        server-addr: @package.host@:8848
        namespace: test
        username: nacos
        password: nacos

#  kafka:
#    # 以逗号分隔的地址列表，用于建立与Kafka集群的初始连接(kafka 默认的端口号为9092)
#    bootstrap-servers: @package.host@:9092
#    producer:
#      bootstrap-servers: @package.host@:9092
#      # 发生错误后，消息重发的次数。
#      retries: 0
#      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
#      batch-size: 16384
#      # 设置生产者内存缓冲区的大小。
#      buffer-memory: 33554432
#      # 键的序列化方式
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      # 值的序列化方式
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
#      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
#      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
#      acks: 1
#      properties:
#        linger:
#          ms: 0   #直接发送消息，默认
#    consumer:
#      bootstrap-servers: @package.host@:9092
#      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
#      auto-commit-interval: 1S
#      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
#      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
#      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
#      auto-offset-reset: earliest
#      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
#      enable-auto-commit: false
#      # 键的反序列化方式
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      # 值的反序列化方式
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      group-id: test
#      max-poll-records: 100 #每次最多拉取100条
#      fetch-max-wait: 10000ms  #拉取最大等待10s
#      fetch-min-size: 1 #至少拉取1条
#    listener:
#      # 在侦听器容器中运行的线程数。
#      concurrency: 5
#      #listner负责ack，每调用一次，就立即commit,#默认模式batch,拉取消息时提交消费确认
#      ack-mode: manual_immediate

  kafka:
    producer:
      retries: 3
      acks: 1    #写完消息文件就发送消息 接收成功确认
      properties:
        linger:
          ms: 0   #直接发送消息，默认
      # 值的反序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      bootstrap-servers: @package.host@:9092 # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      #      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: xxx
      max-poll-records: 100 #每次最多拉取100条
      fetch-max-wait: 10000ms  #拉取最大等待10s
      enable-auto-commit: false  #关闭自动提交
      auto-offset-reset: latest
      fetch-min-size: 1 #至少拉取1条
      bootstrap-servers: @package.host@:9092
    listener:
      ack-mode: batch   #默认模式，拉取消息时提交消费确认
     # ack-mode: manual_immediate

rocketmq:
  name-server: @package.host@:9876
  producer:
    group: test-producer-group
  consumer:
    #组名
    group: default-consumer-group
    #监听主题
    topic: default-topic


#Seata配置从nacos读取
seata:
  tx-service-group: ${spring.application.name}
  enabled: true                       #是否开启seata分布式事务
  enable-auto-data-source-proxy: true #是否开启数据源代理
  service:
    vgroup-mapping:
      msg: default  #！！！！！！注意这里key不要写${spring.application.name}
    grouplist:
      default: @package.host@:8091         #seata-server地址
